const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv").config();
const Doener = require("./models/Doener");

const app = express();
app.use(cors());
app.use(express.json());

// --- DB ---
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("MongoDB verbunden ‚úÖ"))
  .catch(err => console.error("MongoDB-Verbindungsfehler:", err));

app.get("/", (req, res) => res.send("API l√§uft üöÄ"));

// --- Helpers ---
function toPublic(d) {
  if (!d) return d;
  const o = d.toObject ? d.toObject() : d;
  return {
    id: String(o._id),
    name: o.name,
    location: o.location,
    coordinates: o.coordinates,
    image: o.image || "",
    ratings: Array.isArray(o.ratings) ? o.ratings : [],
    comments: (o.comments || []).map(c => ({
      user: c.user,
      text: c.text,
      createdAt: c.createdAt
    }))
  };
}

// --- Routes D√∂ner ---
app.get("/api/doener", async (req, res) => {
  try {
    const list = await Doener.find().sort({ _id: -1 });
    res.json(list.map(toPublic));
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

app.post("/api/doener", async (req, res) => {
  try {
    const { name, location, lat, lng, image, ratings = [] } = req.body || {};
    if (!name || !location) return res.status(400).json({ message: "name und location sind Pflichtfelder" });
    const doc = await Doener.create({
      name,
      location,
      coordinates: {
        lat: typeof lat === "number" ? lat : undefined,
        lng: typeof lng === "number" ? lng : undefined
      },
      image: image || "",
      ratings: Array.isArray(ratings) ? ratings : []
    });
    res.status(201).json(toPublic(doc));
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

app.put("/api/doener/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { name, location, lat, lng, image } = req.body || {};
    const updated = await Doener.findByIdAndUpdate(
      id,
      {
        ...(name != null ? { name } : {}),
        ...(location != null ? { location } : {}),
        ...(image != null ? { image } : {}),
        ...(lat != null || lng != null
          ? { coordinates: { lat, lng } }
          : {}),
      },
      { new: true, runValidators: true }
    );
    if (!updated) return res.status(404).json({ message: "Nicht gefunden" });
    res.json(toPublic(updated));
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

app.delete("/api/doener/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await Doener.findByIdAndDelete(id);
    if (!deleted) return res.status(404).json({ message: "Nicht gefunden" });
    res.json({ ok: true });
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

app.post("/api/doener/:id/rate", async (req, res) => {
  try {
    const { id } = req.params;
    const { value } = req.body || {};
    const v = Number(value);
    if (!Number.isFinite(v) || v < 1 || v > 5) {
      return res.status(400).json({ message: "value muss 1..5 sein" });
    }
    const updated = await Doener.findByIdAndUpdate(
      id,
      { $push: { ratings: v } },
      { new: true, runValidators: true }
    );
    if (!updated) return res.status(404).json({ message: "Nicht gefunden" });
    res.json(toPublic(updated));
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

app.post("/api/doener/:id/comment", async (req, res) => {
  try {
    const { id } = req.params;
    const { user, text } = req.body || {};
    if (!user || !text) return res.status(400).json({ message: "user und text sind Pflichtfelder" });
    const comment = { user: String(user).trim(), text: String(text).trim(), createdAt: new Date() };
    const updated = await Doener.findByIdAndUpdate(
      id,
      { $push: { comments: comment } },
      { new: true, runValidators: true }
    );
    if (!updated) return res.status(404).json({ message: "Nicht gefunden" });
    res.status(201).json(toPublic(updated));
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// Kommentar l√∂schen (per Index; Admin darf immer, sonst nur eigener Kommentar)
app.delete("/api/doener/:id/comment/:index", async (req, res) => {
  try {
    const { id, index } = req.params;
    const idx = parseInt(index, 10);
    if (!Number.isInteger(idx) || idx < 0) return res.status(400).json({ message: "Ung√ºltiger Index" });

    const actingUser = (req.header("x-user") || "").toLowerCase();
    const doc = await Doener.findById(id);
    if (!doc) return res.status(404).json({ message: "Nicht gefunden" });
    if (!Array.isArray(doc.comments) || idx >= doc.comments.length) {
      return res.status(404).json({ message: "Kommentar nicht gefunden" });
    }

    const target = doc.comments[idx];
    const isAdmin = actingUser === "admin";
    if (!isAdmin && actingUser && target.user && actingUser !== String(target.user).toLowerCase()) {
      return res.status(403).json({ message: "Keine Berechtigung zum L√∂schen dieses Kommentars" });
    }

    doc.comments.splice(idx, 1);        // <--- persistenter Remove
    await doc.save();                   // <--- WICHTIG: speichern!
    res.json(toPublic(doc));
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`Server l√§uft auf Port ${PORT}`));